var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,0.922,1,1.894]],["body/controllers/AppController.html",[0,1.492,1,3.065,2,1.205,3,0.49,4,0.422,5,0.422,6,3.272,7,0.716,8,1.352,9,4.597,10,2.204,11,0.038,12,0.988,13,3.963,14,1.092,15,1.492,16,0.607,17,0.49,18,2.659,19,3.272,20,0.49,21,0.296,22,1.464,23,2.476,24,1.205,25,3.963,26,0.03,27,0.03]],["title/modules/AppModule.html",[28,0.756,29,1.894]],["body/modules/AppModule.html",[1,2.724,2,1.142,3,0.328,4,0.282,5,0.282,11,0.038,16,0.717,17,0.328,18,2.595,19,2.187,20,0.328,21,0.198,26,0.023,27,0.023,28,1.087,29,3.754,30,0.979,31,0.979,32,1.193,33,1.193,34,0.979,35,1.963,36,1.193,37,2.187,38,2.187,39,2.187,40,2.891,41,2.891,42,2.891,43,2.891,44,2.595,45,1.92,46,2.118,47,1.69,48,1.193,49,1.079,50,2.65,51,2.425,52,3.099,53,2.65,54,2.187,55,2.65,56,2.65,57,2.65,58,2.65,59,2.345,60,2.65,61,3.755,62,1.883,63,2.187,64,2.65,65,2.65,66,2.65,67,2.65]],["title/injectables/AppService.html",[18,1.513,68,0.682]],["body/injectables/AppService.html",[3,0.512,4,0.441,5,0.441,7,0.748,8,1.388,9,4.666,11,0.037,12,1.032,14,1.14,15,1.532,16,0.512,17,0.512,18,2.514,20,0.512,21,0.309,24,1.258,26,0.031,27,0.031,68,1.133,69,1.863,70,3.416,71,4.138,72,4.138,73,4.138]],["title/controllers/AuthController.html",[0,0.922,74,1.894]],["body/controllers/AuthController.html",[0,1.021,2,1.021,3,0.415,4,0.358,5,0.358,7,0.607,8,1.216,10,2.454,11,0.038,12,1.1,14,1.216,16,0.609,17,0.415,20,0.415,21,0.251,22,1.24,24,1.342,26,0.027,27,0.027,74,2.757,75,2.771,76,2.097,77,3.357,78,4.413,79,3.643,80,3.357,81,4.413,82,3.357,83,1.63,84,1.63,85,1.479,86,4.413,87,3.357,88,4.93,89,3.357,90,3.357,91,0.925,92,4.413,93,2.097,94,3.357,95,3.357,96,2.097,97,2.771,98,3.357,99,2.46,100,2.771,101,3.136,102,2.771,103,3.357,104,3.357,105,3.357,106,3.357,107,3.357,108,3.357,109,3.357,110,3.357]],["title/guards/AuthGuard.html",[59,1.894,111,2.154]],["body/guards/AuthGuard.html",[3,0.303,4,0.261,5,0.261,7,0.442,8,0.978,11,0.039,12,1.04,14,0.978,15,1.079,16,0.626,17,0.303,20,0.303,21,0.183,22,0.904,24,1.269,26,0.022,27,0.022,59,2.216,62,1.74,68,0.798,83,1.541,84,1.541,85,1.398,91,1.338,97,4.311,102,2.021,112,2.449,113,2.021,114,1.541,115,4.575,116,3.777,117,3.548,118,1.362,119,2.449,120,4.18,121,5.223,122,2.449,123,3.548,124,4.575,125,2.449,126,2.449,127,2.216,128,3.548,129,2.449,130,2.606,131,3.444,132,1.529,133,1.529,134,2.021,135,2.021,136,1.74,137,2.021,138,1.978,139,3.548,140,2.449,141,2.449,142,2.449,143,2.449,144,2.449,145,1.973,146,2.449,147,4.575,148,2.449,149,1.973,150,1.597,151,2.449,152,3.444,153,1.102,154,2.449,155,1.74,156,2.021,157,2.449,158,2.449,159,2.021,160,2.021,161,2.449,162,2.449,163,2.449,164,2.449,165,2.449,166,2.449,167,2.449]],["title/modules/AuthModule.html",[28,0.756,40,1.686]],["body/modules/AuthModule.html",[2,1.306,3,0.398,4,0.343,5,0.343,11,0.038,16,0.682,17,0.398,20,0.398,21,0.241,26,0.026,27,0.026,28,1.204,30,1.19,31,1.19,32,1.45,33,1.45,34,1.19,35,2.174,36,2.174,40,3.223,44,2.754,47,1.933,48,1.45,49,1.312,52,3.544,63,2.659,74,3.017,99,2.966,100,2.659,132,2.012,133,2.012,134,2.659,145,1.791,155,2.288,156,2.659,168,2.659,169,2.659,170,2.659,171,3.221,172,3.221,173,3.221,174,3.221,175,3.221,176,2.659,177,3.221,178,3.221,179,3.221]],["title/injectables/AuthService.html",[68,0.682,99,1.513]],["body/injectables/AuthService.html",[3,0.379,4,0.327,5,0.327,7,0.554,8,1.145,11,0.038,12,1.036,14,0.845,15,1.655,16,0.624,17,0.379,20,0.379,21,0.229,24,0.933,26,0.026,27,0.026,46,2.217,54,2.532,68,0.934,69,1.381,79,3.89,83,1.535,84,1.535,85,1.393,91,1.145,99,2.074,114,1.74,116,3.43,118,2.311,120,4.594,127,2.596,131,3.43,132,1.916,138,1.693,149,1.706,150,1.381,152,2.532,153,2.121,180,2.532,181,3.068,182,3.068,183,3.068,184,4.713,185,3.068,186,3.89,187,2.952,188,2.952,189,3.068,190,3.068,191,3.068,192,3.068,193,3.068,194,3.068,195,3.068,196,3.068]],["title/controllers/AuthorsController.html",[0,0.922,197,1.894]],["body/controllers/AuthorsController.html",[0,0.623,2,0.623,3,0.253,4,0.218,5,0.218,7,0.37,8,0.857,10,2.507,11,0.038,12,1.124,14,1.242,15,1.777,16,0.464,17,0.253,20,0.253,21,0.153,22,0.757,23,1.28,24,1.371,26,0.019,27,0.019,76,1.28,83,1.665,84,1.665,85,1.511,91,1.242,93,1.942,96,2.347,114,2.018,130,1.942,138,1.53,149,1.729,150,1.4,153,1.4,197,1.942,198,1.692,199,1.692,200,1.729,201,2.669,202,2.209,203,2.567,204,2.209,205,1.692,206,3.101,207,2.05,208,2.567,209,2.62,210,1.456,211,2.029,212,3.721,213,2.249,214,2.05,215,2.093,216,2.98,217,1.456,218,2.209,219,2.05,220,3.695,221,1.692,222,2.209,223,2.05,224,1.456,225,4.194,226,3.101,227,2.209,228,2.05,229,1.692,230,1.456,231,1.456,232,1.456,233,1.456,234,1.456,235,1.875,236,1.692,237,0.835,238,0.757,239,2.05,240,1.456,241,2.05,242,1.456,243,1.456,244,2.05,245,1.456,246,1.14,247,1.456,248,1.28,249,1.456,250,1.28,251,2.05,252,1.456,253,2.05,254,1.456,255,2.964,256,2.05,257,2.669,258,3.11,259,2.209,260,1.692,261,2.05,262,1.023,263,1.692,264,2.05]],["title/modules/AuthorsModule.html",[28,0.756,41,1.686]],["body/modules/AuthorsModule.html",[2,1.421,3,0.453,4,0.391,5,0.391,11,0.037,16,0.636,17,0.453,20,0.453,21,0.274,26,0.029,27,0.029,28,1.282,30,1.354,31,1.354,32,1.651,33,1.651,34,1.354,35,2.315,36,2.315,41,3.232,47,2.103,48,1.651,49,1.494,197,3.213,235,3.023,236,3.027,265,3.027,266,3.027,267,3.027,268,3.667,269,3.667]],["title/injectables/AuthorsService.html",[68,0.682,235,1.513]],["body/injectables/AuthorsService.html",[3,0.268,4,0.231,5,0.231,7,0.391,8,0.893,11,0.039,12,1.208,14,1.272,15,0.659,16,0.48,17,0.268,20,0.268,21,0.162,22,0.8,24,1.404,26,0.02,27,0.02,45,1.593,68,0.729,69,0.975,83,1.79,84,1.79,85,1.624,91,1.482,114,2.102,118,1.204,138,1.582,145,1.802,199,2.676,200,1.802,205,2.676,206,3.206,208,2.676,209,2.884,211,1.748,212,4,213,1.938,215,1.938,226,1.788,235,1.617,237,1.582,238,0.8,246,2.398,255,2.025,262,2.152,270,1.788,271,3.241,272,3.241,273,1.539,274,2.166,275,3.241,276,5.023,277,2.166,278,3.241,279,3.241,280,3.064,281,2.166,282,2.166,283,3.241,284,2.166,285,3.241,286,2.166,287,1.539,288,2.166,289,2.166,290,2.676,291,2.303,292,2.303,293,2.166,294,2.166,295,2.166,296,3.206,297,2.76,298,3.206,299,2.166,300,2.166,301,2.166,302,2.166,303,2.166]],["title/controllers/BooksController.html",[0,0.922,304,1.894]],["body/controllers/BooksController.html",[0,0.567,2,0.567,3,0.23,4,0.199,5,0.199,7,0.337,8,0.797,10,2.402,11,0.038,12,1.077,14,1.19,15,1.81,16,0.493,17,0.23,20,0.23,21,0.139,22,0.689,23,1.165,24,1.313,26,0.018,27,0.018,76,1.165,83,1.595,84,1.595,85,1.448,91,1.19,93,1.806,96,2.212,114,2.044,130,2.698,138,1.178,149,1.608,150,1.796,153,1.301,200,1.97,201,2.517,202,2.054,203,2.387,204,2.054,209,2.698,210,1.325,211,1.944,213,2.155,215,1.991,216,3.387,217,1.325,218,2.054,220,3.595,221,1.539,222,2.054,224,1.325,227,2.054,229,1.539,230,1.325,231,1.325,232,1.325,233,1.325,234,1.325,237,0.759,238,0.689,240,1.325,242,1.325,243,1.325,245,1.325,247,1.325,248,1.165,249,1.325,250,1.165,252,1.325,254,1.325,257,2.517,259,2.054,260,1.539,262,0.93,263,1.539,291,1.325,304,1.806,305,1.539,306,1.864,307,2.813,308,1.864,309,3.565,310,3.565,311,3.069,312,3.247,313,1.864,314,1.864,315,1.864,316,3.991,317,1.864,318,1.767,319,1.539,320,2.978,321,1.539,322,1.864,323,1.864,324,1.864,325,1.864,326,1.864,327,1.864,328,1.864,329,1.864,330,1.864,331,1.864,332,1.864,333,1.864,334,2.892,335,1.864,336,1.864]],["title/modules/BooksModule.html",[28,0.756,42,1.686]],["body/modules/BooksModule.html",[2,1.421,3,0.453,4,0.391,5,0.391,11,0.037,16,0.636,17,0.453,20,0.453,21,0.274,26,0.029,27,0.029,28,1.282,30,1.354,31,1.354,32,1.651,33,1.651,34,1.354,35,2.315,36,2.315,42,3.232,47,2.103,48,1.651,49,1.494,304,3.213,318,3.023,319,3.027,337,3.027,338,3.027,339,3.027,340,3.667,341,3.667]],["title/injectables/BooksService.html",[68,0.682,318,1.513]],["body/injectables/BooksService.html",[3,0.196,4,0.169,5,0.169,7,0.287,8,0.702,11,0.039,12,1.064,14,1.102,15,1.11,16,0.451,17,0.196,20,0.196,21,0.119,22,0.587,24,1.216,26,0.016,27,0.016,45,1.349,68,0.573,69,0.715,83,1.576,84,1.997,85,1.43,91,1.359,114,1.976,118,0.883,127,3.081,138,1.958,145,2.592,200,2.223,211,1.436,213,1.592,215,1.592,237,1.3,238,0.587,246,2.031,262,2.237,273,1.129,280,2.595,287,1.129,290,3.014,291,1.811,292,1.811,296,1.311,297,2.267,298,2.634,307,2.223,309,3.014,310,3.014,311,2.841,312,3.186,318,1.272,320,2.497,321,1.311,342,1.311,343,2.549,344,2.549,345,2.549,346,1.589,347,1.589,348,4.484,349,1.589,350,3.191,351,2.549,352,1.589,353,2.549,354,1.589,355,2.549,356,1.589,357,2.549,358,1.589,359,3.969,360,3.969,361,3.652,362,1.589,363,3.652,364,2.549,365,2.549,366,1.589,367,4.268,368,1.589,369,2.549,370,3.191,371,2.549,372,2.549,373,2.549,374,1.589,375,1.589,376,1.589]],["title/classes/CreateBookDto.html",[21,0.227,307,1.686]],["body/classes/CreateBookDto.html",[3,0.43,4,0.371,5,0.371,7,0.629,11,0.037,12,1.372,15,1.77,16,0.43,20,0.43,21,0.26,26,0.028,27,0.028,85,1.89,91,1.517,238,1.286,307,2.513,311,3.565,312,4.008,320,3.523,359,4.142,360,4.142,377,3.482,378,4.656,379,2.874,380,3.211,381,5.018,382,3.482,383,3.482,384,3.482,385,3.482,386,3.482]],["title/modules/PrismaModule.html",[28,0.756,43,1.686]],["body/modules/PrismaModule.html",[3,0.465,4,0.401,5,0.401,11,0.037,16,0.587,17,0.465,20,0.465,21,0.281,26,0.029,27,0.029,28,1.297,30,1.389,31,1.389,32,1.693,33,1.693,34,1.389,35,2.342,36,2.342,43,3.25,45,2.245,47,2.137,48,1.693,49,1.532,176,3.92,387,3.105,388,3.105,389,3.761,390,3.761,391,3.761]],["title/injectables/PrismaService.html",[45,1.12,68,0.682]],["body/injectables/PrismaService.html",[3,0.488,4,0.421,5,0.421,7,0.713,8,1.349,11,0.037,12,0.984,14,1.088,16,0.605,17,0.488,20,0.488,21,0.295,26,0.03,27,0.03,45,1.808,68,1.101,69,1.777,114,1.965,137,3.259,153,1.777,238,1.458,392,3.259,393,4.895,394,4.392,395,5.826,396,3.948,397,3.948]],["title/controllers/UsersController.html",[0,0.922,51,1.686]],["body/controllers/UsersController.html",[0,0.624,2,0.624,3,0.254,4,0.219,5,0.219,7,0.371,8,0.858,10,2.509,11,0.038,12,1.125,14,1.243,15,1.777,16,0.465,17,0.254,20,0.254,21,0.153,22,0.759,23,1.283,24,1.372,26,0.019,27,0.019,46,1.268,51,1.732,76,1.283,83,1.666,84,1.666,85,1.512,91,1.243,93,1.945,96,2.35,114,2.082,130,1.945,138,1.532,149,1.732,150,1.402,153,1.402,188,3.206,200,1.732,201,2.673,202,2.213,204,2.673,209,2.818,210,1.459,211,2.031,213,2.251,215,2.095,216,2.983,217,1.459,218,2.213,220,3.77,222,2.213,224,1.459,227,2.213,230,1.459,231,2.673,232,1.459,233,1.459,234,1.459,237,0.837,238,0.759,240,1.459,242,1.459,243,1.459,245,1.459,246,1.142,247,1.459,248,1.283,249,1.459,250,1.283,252,1.459,254,1.459,257,2.983,259,2.213,262,1.025,398,1.695,399,1.695,400,2.054,401,3.105,402,2.054,403,3.114,404,2.054,405,2.054,406,2.054,407,2.054,408,4.198,409,3.105,410,2.054,411,1.695,412,2.054,413,2.054,414,2.054,415,2.054,416,2.054,417,2.054,418,3.114,419,3.114,420,2.054,421,2.054,422,2.054,423,2.054]],["title/modules/UsersModule.html",[28,0.756,44,1.513]],["body/modules/UsersModule.html",[2,1.421,3,0.453,4,0.391,5,0.391,11,0.037,16,0.636,17,0.453,20,0.453,21,0.274,26,0.029,27,0.029,28,1.282,30,1.354,31,1.354,32,1.651,33,1.651,34,1.354,35,2.315,36,2.315,44,2.9,46,2.467,47,2.103,48,1.651,49,1.494,51,2.86,411,3.027,424,3.027,425,3.027,426,3.667,427,3.667,428,3.667]],["title/injectables/UsersService.html",[46,1.235,68,0.682]],["body/injectables/UsersService.html",[3,0.258,4,0.222,5,0.222,7,0.377,8,0.869,11,0.038,12,1.237,14,1.317,15,1.155,16,0.523,17,0.258,20,0.258,21,0.156,22,0.771,24,1.453,26,0.019,27,0.019,45,1.563,46,1.284,68,0.709,69,0.939,83,1.832,84,1.832,85,1.663,91,1.492,114,2.131,118,1.161,127,3.426,138,1.724,153,1.419,186,2.602,187,2.24,188,3.007,211,1.71,213,1.895,215,1.895,237,1.547,238,0.771,246,2.354,250,1.969,262,2.475,273,1.483,280,3.007,287,1.483,292,2.24,399,2.602,401,3.136,409,1.723,429,1.723,430,3.152,431,3.152,432,3.152,433,3.152,434,2.087,435,3.152,436,2.087,437,3.152,438,4.961,439,2.087,440,3.152,441,2.087,442,3.152,443,2.087,444,2.087,445,2.087,446,3.799,447,3.152,448,2.087,449,4.232,450,2.087,451,2.087,452,3.799,453,2.087,454,2.087,455,2.087,456,3.152,457,2.087,458,2.087,459,2.087,460,2.087,461,2.087,462,2.087]],["title/coverage.html",[463,2.929]],["body/coverage.html",[0,1.6,1,1.899,5,0.324,6,2.51,11,0.038,18,1.517,21,0.227,26,0.025,27,0.025,34,1.123,45,1.123,46,1.238,51,1.691,59,1.899,68,1.22,70,2.51,74,1.899,75,2.51,91,0.838,99,1.517,101,2.16,111,2.16,113,2.51,133,1.899,136,2.16,150,1.368,180,2.51,197,1.899,198,2.51,235,1.517,237,1.238,248,3.798,270,2.51,304,1.899,305,2.51,307,1.691,318,1.517,320,1.899,342,2.51,378,2.51,379,2.51,392,2.51,398,2.51,429,2.51,463,2.16,464,2.51,465,3.04,466,3.04,467,2.935,468,4.13,469,2.51,470,5.428,471,5.033,472,4.691,473,4.13,474,3.04,475,2.51,476,3.41,477,5.033,478,4.13,479,2.51,480,3.04,481,3.04,482,3.04]],["title/dependencies.html",[31,1.345,483,2.096]],["body/dependencies.html",[11,0.038,17,0.52,26,0.031,27,0.031,31,1.553,62,2.988,132,2.627,135,3.472,187,2.988,238,1.553,484,5.471,485,4.206,486,4.206,487,4.206,488,4.206,489,4.206,490,4.206,491,4.206,492,4.206,493,4.206,494,4.206,495,4.206]],["title/miscellaneous/functions.html",[496,1.586,497,3.007]],["body/miscellaneous/functions.html",[7,0.82,11,0.033,26,0.033,27,0.033,34,2.087,467,3.225,469,4.664,479,3.747,496,2.835,497,3.747,498,4.539,499,3.747]],["title/index.html",[7,0.459,500,2.539,501,2.539]],["body/index.html",[4,0.231,11,0.036,26,0.02,27,0.02,49,1.975,160,1.792,211,0.977,255,1.356,297,2.307,463,1.542,464,3.21,502,2.17,503,2.17,504,3.889,505,3.247,506,2.17,507,2.17,508,2.17,509,2.17,510,3.247,511,1.792,512,3.889,513,2.17,514,2.17,515,2.17,516,4.317,517,2.17,518,4.849,519,5.284,520,2.17,521,5.168,522,2.17,523,2.17,524,2.17,525,2.17,526,3.247,527,2.17,528,3.889,529,2.17,530,3.247,531,2.17,532,2.17,533,2.17,534,2.17,535,2.17,536,4.317,537,5.168,538,4.849,539,2.17,540,3.247,541,2.17,542,2.17,543,2.17,544,2.17,545,4.849,546,3.247,547,4.317,548,2.17,549,3.247,550,2.17,551,2.17,552,3.247,553,4.621,554,4.317,555,2.17,556,3.247,557,2.17,558,2.17,559,2.17,560,2.17,561,4.317,562,2.17,563,2.17,564,2.17,565,2.17,566,2.17,567,3.247,568,2.17,569,2.17,570,2.17,571,2.17,572,2.17,573,3.247,574,2.17,575,2.17,576,2.17,577,3.247,578,2.17,579,2.17,580,3.563,581,3.247,582,2.17,583,2.17,584,2.17,585,2.17,586,2.17,587,2.17,588,2.17,589,2.17,590,3.247,591,2.17,592,2.17,593,2.17,594,2.17,595,3.889,596,2.17,597,2.17,598,2.17,599,2.17,600,3.247,601,2.17,602,3.247,603,2.17,604,2.17,605,2.17,606,2.17,607,2.17,608,3.247,609,2.17,610,2.17,611,2.17,612,3.247,613,3.247,614,2.17,615,2.17,616,2.17,617,2.17,618,2.17,619,2.17,620,2.17,621,2.17,622,2.17,623,2.17,624,2.17,625,2.17,626,2.17,627,2.17,628,2.17,629,2.17,630,1.792,631,2.17,632,2.17,633,2.17,634,2.17,635,2.17,636,2.17,637,2.17,638,2.17,639,2.17,640,2.17,641,2.17,642,2.17,643,1.792,644,2.17,645,2.17]],["title/modules.html",[30,1.523]],["body/modules.html",[11,0.031,26,0.031,27,0.031,29,2.627,30,1.553,40,2.339,41,2.339,42,2.339,43,2.339,44,2.099,580,4.883,643,4.883,646,5.915,647,5.915]],["title/overview.html",[648,3.403]],["body/overview.html",[2,0.866,11,0.037,18,2.262,21,0.213,26,0.024,27,0.024,28,0.71,29,3.759,30,1.052,31,1.052,32,1.282,33,1.282,34,1.052,35,1.282,36,1.282,37,2.35,38,2.35,39,2.35,40,3.093,41,2.958,42,2.958,43,2.958,44,2.722,45,2.054,46,2.266,47,1.777,48,1.282,49,1.16,69,1.282,99,2.722,111,2.023,168,2.35,169,2.35,170,2.35,235,2.722,265,2.35,266,2.35,267,2.35,318,2.722,337,2.35,338,2.35,339,2.35,387,2.35,388,2.35,424,2.35,425,2.35,648,2.35,649,3.949,650,2.847,651,3.949]],["title/properties.html",[380,2.588,483,2.096]],["body/properties.html",[11,0.037,26,0.033,27,0.033,255,2.86,380,3.253,511,3.78,630,3.78,652,4.579,653,4.579,654,4.579]],["title/miscellaneous/variables.html",[496,1.586,655,3.007]],["body/miscellaneous/variables.html",[7,0.722,11,0.038,26,0.03,27,0.03,91,1.101,101,3.503,133,3.079,136,3.503,145,2.221,150,1.798,155,2.838,159,3.297,237,2.008,394,3.297,467,2.838,475,3.297,476,3.297,496,2.495,499,3.297,655,3.297,656,4.93,657,3.994,658,5.584,659,5.584,660,3.994,661,3.994,662,3.994]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/AuthorsController.html":{},"modules/AuthorsModule.html":{},"injectables/AuthorsService.html":{},"controllers/BooksController.html":{},"modules/BooksModule.html":{},"injectables/BooksService.html":{},"classes/CreateBookDto.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":248,"title":{},"body":{"controllers/AuthorsController.html":{},"controllers/BooksController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["0.0.1",{"_index":653,"title":{},"body":{"properties.html":{}}}],["0.2.2",{"_index":493,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":470,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":472,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":473,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":474,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":477,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":478,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":480,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":651,"title":{},"body":{"overview.html":{}}}],["10",{"_index":250,"title":{},"body":{"controllers/AuthorsController.html":{},"controllers/BooksController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["11.0.0",{"_index":485,"title":{},"body":{"dependencies.html":{}}}],["11.0.1",{"_index":484,"title":{},"body":{"dependencies.html":{}}}],["30m",{"_index":179,"title":{},"body":{"modules/AuthModule.html":{}}}],["5",{"_index":650,"title":{},"body":{"overview.html":{}}}],["6",{"_index":649,"title":{},"body":{"overview.html":{}}}],["6.0.0",{"_index":490,"title":{},"body":{"dependencies.html":{}}}],["6.13.0",{"_index":489,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":495,"title":{},"body":{"dependencies.html":{}}}],["access",{"_index":161,"title":{},"body":{"guards/AuthGuard.html":{}}}],["access_token",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{}}}],["allowing",{"_index":568,"title":{},"body":{"index.html":{}}}],["amazing",{"_index":618,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":538,"title":{},"body":{"index.html":{}}}],["applications",{"_index":510,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["assigning",{"_index":158,"title":{},"body":{"guards/AuthGuard.html":{}}}],["async",{"_index":114,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/AuthorsController.html":{},"injectables/AuthorsService.html":{},"controllers/BooksController.html":{},"injectables/BooksService.html":{},"injectables/PrismaService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":174,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.guard",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/auth.module",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":74,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":59,"title":{"guards/AuthGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"coverage.html":{}}}],["authmodule",{"_index":40,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":255,"title":{},"body":{"controllers/AuthorsController.html":{},"injectables/AuthorsService.html":{},"index.html":{},"properties.html":{}}}],["author(authorwhereuniqueinput",{"_index":275,"title":{},"body":{"injectables/AuthorsService.html":{}}}],["authorid",{"_index":381,"title":{},"body":{"classes/CreateBookDto.html":{}}}],["authors",{"_index":199,"title":{},"body":{"controllers/AuthorsController.html":{},"injectables/AuthorsService.html":{}}}],["authors(params",{"_index":279,"title":{},"body":{"injectables/AuthorsService.html":{}}}],["authors.controller",{"_index":269,"title":{},"body":{"modules/AuthorsModule.html":{}}}],["authors.service",{"_index":236,"title":{},"body":{"controllers/AuthorsController.html":{},"modules/AuthorsModule.html":{}}}],["authors/authors.module",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["authorscontroller",{"_index":197,"title":{"controllers/AuthorsController.html":{}},"body":{"controllers/AuthorsController.html":{},"modules/AuthorsModule.html":{},"coverage.html":{}}}],["authorsmodule",{"_index":41,"title":{"modules/AuthorsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthorsModule.html":{},"modules.html":{},"overview.html":{}}}],["authorsservice",{"_index":235,"title":{"injectables/AuthorsService.html":{}},"body":{"controllers/AuthorsController.html":{},"modules/AuthorsModule.html":{},"injectables/AuthorsService.html":{},"coverage.html":{},"overview.html":{}}}],["authorwhereuniqueinput",{"_index":278,"title":{},"body":{"injectables/AuthorsService.html":{}}}],["authservice",{"_index":99,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":153,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/AuthorsController.html":{},"controllers/BooksController.html":{},"injectables/PrismaService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":556,"title":{},"body":{"index.html":{}}}],["backers",{"_index":619,"title":{},"body":{"index.html":{}}}],["based",{"_index":551,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare(pass",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(data.password",{"_index":450,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.hash(string(data.password",{"_index":460,"title":{},"body":{"injectables/UsersService.html":{}}}],["bearer",{"_index":167,"title":{},"body":{"guards/AuthGuard.html":{}}}],["before",{"_index":454,"title":{},"body":{"injectables/UsersService.html":{}}}],["board",{"_index":611,"title":{},"body":{"index.html":{}}}],["body",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorsController.html":{},"controllers/BooksController.html":{},"controllers/UsersController.html":{}}}],["book",{"_index":320,"title":{},"body":{"controllers/BooksController.html":{},"injectables/BooksService.html":{},"classes/CreateBookDto.html":{},"coverage.html":{}}}],["book(bookwhereuniqueinput",{"_index":347,"title":{},"body":{"injectables/BooksService.html":{}}}],["bookdata",{"_index":361,"title":{},"body":{"injectables/BooksService.html":{}}}],["books",{"_index":291,"title":{},"body":{"injectables/AuthorsService.html":{},"controllers/BooksController.html":{},"injectables/BooksService.html":{}}}],["books(params",{"_index":351,"title":{},"body":{"injectables/BooksService.html":{}}}],["books.controller",{"_index":341,"title":{},"body":{"modules/BooksModule.html":{}}}],["books.service",{"_index":319,"title":{},"body":{"controllers/BooksController.html":{},"modules/BooksModule.html":{}}}],["books/books.module",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["bookscontroller",{"_index":304,"title":{"controllers/BooksController.html":{}},"body":{"controllers/BooksController.html":{},"modules/BooksModule.html":{},"coverage.html":{}}}],["booksmodule",{"_index":42,"title":{"modules/BooksModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BooksModule.html":{},"modules.html":{},"overview.html":{}}}],["booksservice",{"_index":318,"title":{"injectables/BooksService.html":{}},"body":{"controllers/BooksController.html":{},"modules/BooksModule.html":{},"injectables/BooksService.html":{},"coverage.html":{},"overview.html":{}}}],["bookwhereuniqueinput",{"_index":350,"title":{},"body":{"injectables/BooksService.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuthorsModule.html":{},"modules/BooksModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":647,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":643,"title":{},"body":{"index.html":{},"modules.html":{}}}],["building",{"_index":505,"title":{},"body":{"index.html":{}}}],["canactivate",{"_index":115,"title":{},"body":{"guards/AuthGuard.html":{}}}],["canactivate(context",{"_index":123,"title":{},"body":{"guards/AuthGuard.html":{}}}],["catch",{"_index":165,"title":{},"body":{"guards/AuthGuard.html":{}}}],["category",{"_index":312,"title":{},"body":{"controllers/BooksController.html":{},"injectables/BooksService.html":{},"classes/CreateBookDto.html":{}}}],["categoryquery",{"_index":369,"title":{},"body":{"injectables/BooksService.html":{}}}],["channel",{"_index":583,"title":{},"body":{"index.html":{}}}],["check",{"_index":545,"title":{},"body":{"index.html":{}}}],["class",{"_index":21,"title":{"classes/CreateBookDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/AuthorsController.html":{},"modules/AuthorsModule.html":{},"injectables/AuthorsService.html":{},"controllers/BooksController.html":{},"modules/BooksModule.html":{},"injectables/BooksService.html":{},"classes/CreateBookDto.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["classes",{"_index":377,"title":{},"body":{"classes/CreateBookDto.html":{}}}],["clicks",{"_index":567,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":550,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":168,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":170,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":171,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":169,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authorsmodule",{"_index":265,"title":{},"body":{"modules/AuthorsModule.html":{},"overview.html":{}}}],["cluster_authorsmodule_exports",{"_index":267,"title":{},"body":{"modules/AuthorsModule.html":{},"overview.html":{}}}],["cluster_authorsmodule_providers",{"_index":266,"title":{},"body":{"modules/AuthorsModule.html":{},"overview.html":{}}}],["cluster_booksmodule",{"_index":337,"title":{},"body":{"modules/BooksModule.html":{},"overview.html":{}}}],["cluster_booksmodule_exports",{"_index":338,"title":{},"body":{"modules/BooksModule.html":{},"overview.html":{}}}],["cluster_booksmodule_providers",{"_index":339,"title":{},"body":{"modules/BooksModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":387,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":388,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":389,"title":{},"body":{"modules/PrismaModule.html":{}}}],["cluster_usersmodule",{"_index":424,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":425,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":426,"title":{},"body":{"modules/UsersModule.html":{}}}],["come",{"_index":574,"title":{},"body":{"index.html":{}}}],["commands",{"_index":632,"title":{},"body":{"index.html":{}}}],["compodoc",{"_index":633,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":639,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc#doc",{"_index":636,"title":{},"body":{"index.html":{}}}],["condition",{"_index":144,"title":{},"body":{"guards/AuthGuard.html":{}}}],["connectorcreate",{"_index":363,"title":{},"body":{"injectables/BooksService.html":{}}}],["const",{"_index":138,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/AuthorsController.html":{},"injectables/AuthorsService.html":{},"controllers/BooksController.html":{},"injectables/BooksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constants",{"_index":134,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{}}}],["constructor",{"_index":118,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthorsService.html":{},"injectables/BooksService.html":{},"injectables/UsersService.html":{}}}],["constructor(jwtservice",{"_index":119,"title":{},"body":{"guards/AuthGuard.html":{}}}],["constructor(prisma",{"_index":273,"title":{},"body":{"injectables/AuthorsService.html":{},"injectables/BooksService.html":{},"injectables/UsersService.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"controllers/AuthorsController.html":{},"injectables/AuthorsService.html":{},"controllers/BooksController.html":{},"injectables/BooksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{}}}],["contains",{"_index":296,"title":{},"body":{"injectables/AuthorsService.html":{},"injectables/BooksService.html":{}}}],["context",{"_index":126,"title":{},"body":{"guards/AuthGuard.html":{}}}],["context.getclass",{"_index":142,"title":{},"body":{"guards/AuthGuard.html":{}}}],["context.gethandler",{"_index":141,"title":{},"body":{"guards/AuthGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":146,"title":{},"body":{"guards/AuthGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorsController.html":{},"controllers/BooksController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorsController.html":{},"controllers/BooksController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('authors",{"_index":239,"title":{},"body":{"controllers/AuthorsController.html":{}}}],["controller('books",{"_index":322,"title":{},"body":{"controllers/BooksController.html":{}}}],["controller('users",{"_index":412,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/AuthorsController.html":{},"modules/AuthorsModule.html":{},"controllers/BooksController.html":{},"modules/BooksModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["courses",{"_index":589,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":463,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":200,"title":{},"body":{"controllers/AuthorsController.html":{},"injectables/AuthorsService.html":{},"controllers/BooksController.html":{},"injectables/BooksService.html":{},"controllers/UsersController.html":{}}}],["create(@body",{"_index":240,"title":{},"body":{"controllers/AuthorsController.html":{},"controllers/BooksController.html":{},"controllers/UsersController.html":{}}}],["create(createauthordto",{"_index":205,"title":{},"body":{"controllers/AuthorsController.html":{},"injectables/AuthorsService.html":{}}}],["create(createbookdto",{"_index":306,"title":{},"body":{"controllers/BooksController.html":{}}}],["create(createuserdto",{"_index":400,"title":{},"body":{"controllers/UsersController.html":{}}}],["createauthordto",{"_index":208,"title":{},"body":{"controllers/AuthorsController.html":{},"injectables/AuthorsService.html":{}}}],["createbook",{"_index":343,"title":{},"body":{"injectables/BooksService.html":{}}}],["createbook(data",{"_index":353,"title":{},"body":{"injectables/BooksService.html":{}}}],["createbookdto",{"_index":307,"title":{"classes/CreateBookDto.html":{}},"body":{"controllers/BooksController.html":{},"injectables/BooksService.html":{},"classes/CreateBookDto.html":{},"coverage.html":{}}}],["createuser",{"_index":430,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuser(data",{"_index":435,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto",{"_index":403,"title":{},"body":{"controllers/UsersController.html":{}}}],["d",{"_index":635,"title":{},"body":{"index.html":{}}}],["data",{"_index":262,"title":{},"body":{"controllers/AuthorsController.html":{},"injectables/AuthorsService.html":{},"controllers/BooksController.html":{},"injectables/BooksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuthorsModule.html":{},"modules/BooksModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorsController.html":{},"controllers/BooksController.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":585,"title":{},"body":{"index.html":{}}}],["default",{"_index":658,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/AuthorsController.html":{},"injectables/AuthorsService.html":{},"controllers/BooksController.html":{},"injectables/BooksService.html":{},"classes/CreateBookDto.html":{},"injectables/PrismaService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":231,"title":{},"body":{"controllers/AuthorsController.html":{},"controllers/BooksController.html":{},"controllers/UsersController.html":{}}}],["delete(':id",{"_index":222,"title":{},"body":{"controllers/AuthorsController.html":{},"controllers/BooksController.html":{},"controllers/UsersController.html":{}}}],["delete(@param('id",{"_index":422,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(id",{"_index":404,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteauthor",{"_index":271,"title":{},"body":{"injectables/AuthorsService.html":{}}}],["deleteauthor(where",{"_index":283,"title":{},"body":{"injectables/AuthorsService.html":{}}}],["deletebook",{"_index":344,"title":{},"body":{"injectables/BooksService.html":{}}}],["deletebook(where",{"_index":355,"title":{},"body":{"injectables/BooksService.html":{}}}],["deleteuser",{"_index":431,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleteuser(where",{"_index":437,"title":{},"body":{"injectables/UsersService.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuthorsModule.html":{},"modules/BooksModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":536,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":555,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":546,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":566,"title":{},"body":{"index.html":{}}}],["description",{"_index":511,"title":{},"body":{"index.html":{},"properties.html":{}}}],["development",{"_index":522,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":597,"title":{},"body":{"index.html":{}}}],["discord",{"_index":582,"title":{},"body":{"index.html":{}}}],["dive",{"_index":584,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":464,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dto",{"_index":321,"title":{},"body":{"controllers/BooksController.html":{},"injectables/BooksService.html":{}}}],["dto.ts",{"_index":379,"title":{},"body":{"classes/CreateBookDto.html":{},"coverage.html":{}}}],["dto.ts:4",{"_index":386,"title":{},"body":{"classes/CreateBookDto.html":{}}}],["dto.ts:5",{"_index":382,"title":{},"body":{"classes/CreateBookDto.html":{}}}],["dto.ts:6",{"_index":383,"title":{},"body":{"classes/CreateBookDto.html":{}}}],["dto.ts:7",{"_index":385,"title":{},"body":{"classes/CreateBookDto.html":{}}}],["dto.ts:8",{"_index":384,"title":{},"body":{"classes/CreateBookDto.html":{}}}],["e2e",{"_index":531,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":506,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":543,"title":{},"body":{"index.html":{}}}],["ensure",{"_index":541,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":601,"title":{},"body":{"index.html":{}}}],["env.is_public_key",{"_index":660,"title":{},"body":{"miscellaneous/variables.html":{}}}],["env.jwt_secret",{"_index":662,"title":{},"body":{"miscellaneous/variables.html":{}}}],["equals",{"_index":370,"title":{},"body":{"injectables/BooksService.html":{}}}],["example",{"_index":518,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":124,"title":{},"body":{"guards/AuthGuard.html":{}}}],["experience",{"_index":587,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":178,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/AuthorsController.html":{},"modules/AuthorsModule.html":{},"injectables/AuthorsService.html":{},"controllers/BooksController.html":{},"modules/BooksModule.html":{},"injectables/BooksService.html":{},"classes/CreateBookDto.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuthorsModule.html":{},"modules/BooksModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":135,"title":{},"body":{"guards/AuthGuard.html":{},"dependencies.html":{}}}],["extends",{"_index":393,"title":{},"body":{"injectables/PrismaService.html":{}}}],["extracttokenfromheader",{"_index":117,"title":{},"body":{"guards/AuthGuard.html":{}}}],["extracttokenfromheader(request",{"_index":128,"title":{},"body":{"guards/AuthGuard.html":{}}}],["fast",{"_index":559,"title":{},"body":{"index.html":{}}}],["features",{"_index":570,"title":{},"body":{"index.html":{}}}],["few",{"_index":561,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/AuthorsController.html":{},"modules/AuthorsModule.html":{},"injectables/AuthorsService.html":{},"controllers/BooksController.html":{},"modules/BooksModule.html":{},"injectables/BooksService.html":{},"classes/CreateBookDto.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["findall",{"_index":201,"title":{},"body":{"controllers/AuthorsController.html":{},"controllers/BooksController.html":{},"controllers/UsersController.html":{}}}],["findall(skip",{"_index":210,"title":{},"body":{"controllers/AuthorsController.html":{},"controllers/BooksController.html":{},"controllers/UsersController.html":{}}}],["findone",{"_index":202,"title":{},"body":{"controllers/AuthorsController.html":{},"controllers/BooksController.html":{},"controllers/UsersController.html":{}}}],["findone(@param('id",{"_index":254,"title":{},"body":{"controllers/AuthorsController.html":{},"controllers/BooksController.html":{},"controllers/UsersController.html":{}}}],["findone(id",{"_index":217,"title":{},"body":{"controllers/AuthorsController.html":{},"controllers/BooksController.html":{},"controllers/UsersController.html":{}}}],["findusername",{"_index":432,"title":{},"body":{"injectables/UsersService.html":{}}}],["findusername(username",{"_index":440,"title":{},"body":{"injectables/UsersService.html":{}}}],["firstname",{"_index":295,"title":{},"body":{"injectables/AuthorsService.html":{}}}],["focus",{"_index":569,"title":{},"body":{"index.html":{}}}],["follow",{"_index":605,"title":{},"body":{"index.html":{}}}],["found",{"_index":259,"title":{},"body":{"controllers/AuthorsController.html":{},"controllers/BooksController.html":{},"controllers/UsersController.html":{}}}],["framework",{"_index":504,"title":{},"body":{"index.html":{}}}],["full",{"_index":600,"title":{},"body":{"index.html":{}}}],["function",{"_index":468,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":497,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":564,"title":{},"body":{"index.html":{}}}],["generation",{"_index":637,"title":{},"body":{"index.html":{}}}],["genre",{"_index":310,"title":{},"body":{"controllers/BooksController.html":{},"injectables/BooksService.html":{}}}],["genrequery",{"_index":373,"title":{},"body":{"injectables/BooksService.html":{}}}],["genres",{"_index":360,"title":{},"body":{"injectables/BooksService.html":{},"classes/CreateBookDto.html":{}}}],["genres?.map((name",{"_index":365,"title":{},"body":{"injectables/BooksService.html":{}}}],["get(':id",{"_index":218,"title":{},"body":{"controllers/AuthorsController.html":{},"controllers/BooksController.html":{},"controllers/UsersController.html":{}}}],["get('profile",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getprofile",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(@request",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(req",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{}}}],["getting",{"_index":500,"title":{"index.html":{}},"body":{}}],["global",{"_index":176,"title":{},"body":{"modules/AuthModule.html":{},"modules/PrismaModule.html":{}}}],["graph",{"_index":592,"title":{},"body":{"index.html":{}}}],["grow",{"_index":615,"title":{},"body":{"index.html":{}}}],["guard",{"_index":111,"title":{"guards/AuthGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":112,"title":{},"body":{"guards/AuthGuard.html":{}}}],["handlers",{"_index":163,"title":{},"body":{"guards/AuthGuard.html":{}}}],["hands",{"_index":586,"title":{},"body":{"index.html":{}}}],["handy",{"_index":575,"title":{},"body":{"index.html":{}}}],["hash",{"_index":453,"title":{},"body":{"injectables/UsersService.html":{}}}],["hashedpassword",{"_index":449,"title":{},"body":{"injectables/UsersService.html":{}}}],["hello",{"_index":72,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":590,"title":{},"body":{"index.html":{}}}],["here",{"_index":160,"title":{},"body":{"guards/AuthGuard.html":{},"index.html":{}}}],["http://localhost:8080",{"_index":645,"title":{},"body":{"index.html":{}}}],["httpcode",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://nestjs.com",{"_index":627,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{}}}],["id",{"_index":220,"title":{},"body":{"controllers/AuthorsController.html":{},"controllers/BooksController.html":{},"controllers/UsersController.html":{}}}],["identifier",{"_index":465,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":137,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/PrismaService.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/AuthorsController.html":{},"modules/AuthorsModule.html":{},"injectables/AuthorsService.html":{},"controllers/BooksController.html":{},"modules/BooksModule.html":{},"injectables/BooksService.html":{},"classes/CreateBookDto.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["include",{"_index":290,"title":{},"body":{"injectables/AuthorsService.html":{},"injectables/BooksService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/AuthorsController.html":{},"injectables/AuthorsService.html":{},"controllers/BooksController.html":{},"injectables/BooksService.html":{},"classes/CreateBookDto.html":{},"injectables/PrismaService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/AuthorsController.html":{},"modules/AuthorsModule.html":{},"injectables/AuthorsService.html":{},"controllers/BooksController.html":{},"modules/BooksModule.html":{},"injectables/BooksService.html":{},"classes/CreateBookDto.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":548,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":572,"title":{},"body":{"index.html":{}}}],["injectable",{"_index":68,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/AuthorsService.html":{},"injectables/BooksService.html":{},"injectables/PrismaService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthorsService.html":{},"injectables/BooksService.html":{},"injectables/PrismaService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":69,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/AuthorsService.html":{},"injectables/BooksService.html":{},"injectables/PrismaService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["insensitive",{"_index":298,"title":{},"body":{"injectables/AuthorsService.html":{},"injectables/BooksService.html":{}}}],["install",{"_index":563,"title":{},"body":{"index.html":{}}}],["installation",{"_index":634,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":520,"title":{},"body":{"index.html":{}}}],["interact",{"_index":593,"title":{},"body":{"index.html":{}}}],["is_public_key",{"_index":136,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ispublic",{"_index":139,"title":{},"body":{"guards/AuthGuard.html":{}}}],["job",{"_index":608,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":610,"title":{},"body":{"index.html":{}}}],["join",{"_index":621,"title":{},"body":{"index.html":{}}}],["json.parse(orderby",{"_index":252,"title":{},"body":{"controllers/AuthorsController.html":{},"controllers/BooksController.html":{},"controllers/UsersController.html":{}}}],["json.parse(where",{"_index":416,"title":{},"body":{"controllers/UsersController.html":{}}}],["jwtconstants",{"_index":133,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.secret",{"_index":156,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{}}}],["jwtmodule",{"_index":173,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":175,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":120,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["kamil",{"_index":624,"title":{},"body":{"index.html":{}}}],["key",{"_index":539,"title":{},"body":{"index.html":{}}}],["lastname",{"_index":300,"title":{},"body":{"injectables/AuthorsService.html":{}}}],["learn",{"_index":578,"title":{},"body":{"index.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuthorsModule.html":{},"modules/BooksModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["license",{"_index":630,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":613,"title":{},"body":{"index.html":{}}}],["linkedin",{"_index":607,"title":{},"body":{"index.html":{}}}],["literal",{"_index":280,"title":{},"body":{"injectables/AuthorsService.html":{},"injectables/BooksService.html":{},"injectables/UsersService.html":{}}}],["looking",{"_index":549,"title":{},"body":{"index.html":{}}}],["loop",{"_index":603,"title":{},"body":{"index.html":{}}}],["main",{"_index":469,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["makes",{"_index":557,"title":{},"body":{"index.html":{}}}],["managing",{"_index":571,"title":{},"body":{"index.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/AuthorsController.html":{},"modules/AuthorsModule.html":{},"injectables/AuthorsService.html":{},"controllers/BooksController.html":{},"modules/BooksModule.html":{},"injectables/BooksService.html":{},"classes/CreateBookDto.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["mau",{"_index":553,"title":{},"body":{"index.html":{}}}],["metadata",{"_index":492,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/AuthorsController.html":{},"injectables/AuthorsService.html":{},"controllers/BooksController.html":{},"injectables/BooksService.html":{},"injectables/PrismaService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["middlename",{"_index":299,"title":{},"body":{"injectables/AuthorsService.html":{}}}],["miscellaneous",{"_index":496,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":612,"title":{},"body":{"index.html":{}}}],["mode",{"_index":297,"title":{},"body":{"injectables/AuthorsService.html":{},"injectables/BooksService.html":{},"index.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuthorsModule.html":{},"modules/BooksModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuthorsModule.html":{},"modules/BooksModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuthorsModule.html":{},"modules/BooksModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":547,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":625,"title":{},"body":{"index.html":{}}}],["name",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/AuthorsController.html":{},"injectables/AuthorsService.html":{},"controllers/BooksController.html":{},"injectables/BooksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["navigate",{"_index":644,"title":{},"body":{"index.html":{}}}],["need",{"_index":598,"title":{},"body":{"index.html":{}}}],["nest",{"_index":512,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":629,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":537,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/AuthorsController.html":{},"modules/AuthorsModule.html":{},"injectables/AuthorsService.html":{},"controllers/BooksController.html":{},"modules/BooksModule.html":{},"injectables/BooksService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":132,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":486,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mau",{"_index":565,"title":{},"body":{"index.html":{}}}],["nestjs/platform",{"_index":488,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":150,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/AuthorsController.html":{},"controllers/BooksController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["node.js",{"_index":503,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":233,"title":{},"body":{"controllers/AuthorsController.html":{},"controllers/BooksController.html":{},"controllers/UsersController.html":{}}}],["notfoundexception('author",{"_index":258,"title":{},"body":{"controllers/AuthorsController.html":{}}}],["notfoundexception('book",{"_index":334,"title":{},"body":{"controllers/BooksController.html":{}}}],["notfoundexception('user",{"_index":419,"title":{},"body":{"controllers/UsersController.html":{}}}],["npm",{"_index":519,"title":{},"body":{"index.html":{}}}],["npx",{"_index":638,"title":{},"body":{"index.html":{}}}],["number",{"_index":292,"title":{},"body":{"injectables/AuthorsService.html":{},"injectables/BooksService.html":{},"injectables/UsersService.html":{}}}],["number(skip",{"_index":247,"title":{},"body":{"controllers/AuthorsController.html":{},"controllers/BooksController.html":{},"controllers/UsersController.html":{}}}],["number(take",{"_index":249,"title":{},"body":{"controllers/AuthorsController.html":{},"controllers/BooksController.html":{},"controllers/UsersController.html":{}}}],["object",{"_index":159,"title":{},"body":{"guards/AuthGuard.html":{},"miscellaneous/variables.html":{}}}],["offer",{"_index":609,"title":{},"body":{"index.html":{}}}],["official",{"_index":554,"title":{},"body":{"index.html":{}}}],["onmoduleinit",{"_index":395,"title":{},"body":{"injectables/PrismaService.html":{}}}],["open",{"_index":614,"title":{},"body":{"index.html":{}}}],["optional",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/AuthorsController.html":{},"injectables/AuthorsService.html":{},"controllers/BooksController.html":{},"injectables/BooksService.html":{},"classes/CreateBookDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["orderby",{"_index":213,"title":{},"body":{"controllers/AuthorsController.html":{},"injectables/AuthorsService.html":{},"controllers/BooksController.html":{},"injectables/BooksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["out",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuthorsModule.html":{},"modules/BooksModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":648,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":640,"title":{},"body":{"index.html":{}}}],["package",{"_index":483,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":230,"title":{},"body":{"controllers/AuthorsController.html":{},"controllers/BooksController.html":{},"controllers/UsersController.html":{}}}],["param('id",{"_index":420,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/AuthorsController.html":{},"injectables/AuthorsService.html":{},"controllers/BooksController.html":{},"injectables/BooksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["params",{"_index":246,"title":{},"body":{"controllers/AuthorsController.html":{},"injectables/AuthorsService.html":{},"injectables/BooksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["part",{"_index":599,"title":{},"body":{"index.html":{}}}],["pass",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{}}}],["password",{"_index":452,"title":{},"body":{"injectables/UsersService.html":{}}}],["patch",{"_index":229,"title":{},"body":{"controllers/AuthorsController.html":{},"controllers/BooksController.html":{}}}],["payload",{"_index":152,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["platform",{"_index":552,"title":{},"body":{"index.html":{}}}],["please",{"_index":581,"title":{},"body":{"index.html":{}}}],["possible",{"_index":544,"title":{},"body":{"index.html":{}}}],["post",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorsController.html":{},"controllers/BooksController.html":{},"controllers/UsersController.html":{}}}],["post('login",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorsController.html":{},"controllers/BooksController.html":{},"controllers/UsersController.html":{}}}],["prisma",{"_index":237,"title":{},"body":{"controllers/AuthorsController.html":{},"injectables/AuthorsService.html":{},"controllers/BooksController.html":{},"injectables/BooksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["prisma.authorcreateinput",{"_index":206,"title":{},"body":{"controllers/AuthorsController.html":{},"injectables/AuthorsService.html":{}}}],["prisma.authororderbywithrelationinput",{"_index":293,"title":{},"body":{"injectables/AuthorsService.html":{}}}],["prisma.authorupdateinput",{"_index":226,"title":{},"body":{"controllers/AuthorsController.html":{},"injectables/AuthorsService.html":{}}}],["prisma.authorwhereinput",{"_index":294,"title":{},"body":{"injectables/AuthorsService.html":{}}}],["prisma.authorwhereuniqueinput",{"_index":276,"title":{},"body":{"injectables/AuthorsService.html":{}}}],["prisma.bookorderbywithrelationinput",{"_index":368,"title":{},"body":{"injectables/BooksService.html":{}}}],["prisma.bookwhereinput",{"_index":367,"title":{},"body":{"injectables/BooksService.html":{}}}],["prisma.bookwhereuniqueinput",{"_index":348,"title":{},"body":{"injectables/BooksService.html":{}}}],["prisma.service",{"_index":391,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma.usercreateinput",{"_index":401,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["prisma.userorderbywithrelationinput",{"_index":458,"title":{},"body":{"injectables/UsersService.html":{}}}],["prisma.userupdateinput",{"_index":409,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["prisma.userwhereinput",{"_index":457,"title":{},"body":{"injectables/UsersService.html":{}}}],["prisma.userwhereuniqueinput",{"_index":438,"title":{},"body":{"injectables/UsersService.html":{}}}],["prisma/.../seed.ts",{"_index":499,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["prisma/client",{"_index":238,"title":{},"body":{"controllers/AuthorsController.html":{},"injectables/AuthorsService.html":{},"controllers/BooksController.html":{},"injectables/BooksService.html":{},"classes/CreateBookDto.html":{},"injectables/PrismaService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["prisma/prisma.module",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["prisma/prisma.service",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["prisma/seed.ts",{"_index":467,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["prismaclient",{"_index":394,"title":{},"body":{"injectables/PrismaService.html":{},"miscellaneous/variables.html":{}}}],["prismamodule",{"_index":43,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PrismaModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":45,"title":{"injectables/PrismaService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthorsService.html":{},"injectables/BooksService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":116,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["production",{"_index":526,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":502,"title":{},"body":{"index.html":{}}}],["project",{"_index":516,"title":{},"body":{"index.html":{}}}],["promise",{"_index":127,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/BooksService.html":{},"injectables/UsersService.html":{}}}],["properties",{"_index":380,"title":{"properties.html":{}},"body":{"classes/CreateBookDto.html":{},"properties.html":{}}}],["provide",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuthorsModule.html":{},"modules/BooksModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["public",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@httpcode(httpstatus.ok)@post('login",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{}}}],["public.decorator",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{}}}],["put",{"_index":234,"title":{},"body":{"controllers/AuthorsController.html":{},"controllers/BooksController.html":{},"controllers/UsersController.html":{}}}],["put(':id",{"_index":227,"title":{},"body":{"controllers/AuthorsController.html":{},"controllers/BooksController.html":{},"controllers/UsersController.html":{}}}],["query",{"_index":232,"title":{},"body":{"controllers/AuthorsController.html":{},"controllers/BooksController.html":{},"controllers/UsersController.html":{}}}],["query('category",{"_index":327,"title":{},"body":{"controllers/BooksController.html":{}}}],["query('genre",{"_index":325,"title":{},"body":{"controllers/BooksController.html":{}}}],["query('orderby",{"_index":245,"title":{},"body":{"controllers/AuthorsController.html":{},"controllers/BooksController.html":{},"controllers/UsersController.html":{}}}],["query('search",{"_index":244,"title":{},"body":{"controllers/AuthorsController.html":{}}}],["query('skip",{"_index":242,"title":{},"body":{"controllers/AuthorsController.html":{},"controllers/BooksController.html":{},"controllers/UsersController.html":{}}}],["query('tag",{"_index":324,"title":{},"body":{"controllers/BooksController.html":{}}}],["query('take",{"_index":243,"title":{},"body":{"controllers/AuthorsController.html":{},"controllers/BooksController.html":{},"controllers/UsersController.html":{}}}],["query('title",{"_index":326,"title":{},"body":{"controllers/BooksController.html":{}}}],["query('where",{"_index":415,"title":{},"body":{"controllers/UsersController.html":{}}}],["questions",{"_index":579,"title":{},"body":{"index.html":{}}}],["read",{"_index":622,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthorsController.html":{},"controllers/BooksController.html":{},"controllers/UsersController.html":{}}}],["ready",{"_index":535,"title":{},"body":{"index.html":{}}}],["real",{"_index":594,"title":{},"body":{"index.html":{}}}],["record",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{}}}],["reflect",{"_index":491,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":121,"title":{},"body":{"guards/AuthGuard.html":{}}}],["remove",{"_index":203,"title":{},"body":{"controllers/AuthorsController.html":{},"controllers/BooksController.html":{}}}],["remove(@param('id",{"_index":263,"title":{},"body":{"controllers/AuthorsController.html":{},"controllers/BooksController.html":{}}}],["remove(id",{"_index":221,"title":{},"body":{"controllers/AuthorsController.html":{},"controllers/BooksController.html":{}}}],["repository",{"_index":515,"title":{},"body":{"index.html":{}}}],["req",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.user",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{}}}],["request",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{}}}],["request.headers.authorization?.split",{"_index":166,"title":{},"body":{"guards/AuthGuard.html":{}}}],["request['user",{"_index":164,"title":{},"body":{"guards/AuthGuard.html":{}}}],["requiring",{"_index":560,"title":{},"body":{"index.html":{}}}],["reset",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuthorsModule.html":{},"modules/BooksModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":573,"title":{},"body":{"index.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/AuthorsController.html":{},"modules/AuthorsModule.html":{},"injectables/AuthorsService.html":{},"controllers/BooksController.html":{},"modules/BooksModule.html":{},"injectables/BooksService.html":{},"classes/CreateBookDto.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/AuthorsController.html":{},"injectables/AuthorsService.html":{},"controllers/BooksController.html":{},"injectables/BooksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/AuthorsController.html":{},"injectables/AuthorsService.html":{},"controllers/BooksController.html":{},"injectables/BooksService.html":{},"injectables/PrismaService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["route",{"_index":162,"title":{},"body":{"guards/AuthGuard.html":{}}}],["run",{"_index":521,"title":{},"body":{"index.html":{}}}],["runs",{"_index":542,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":494,"title":{},"body":{"dependencies.html":{}}}],["saving",{"_index":455,"title":{},"body":{"injectables/UsersService.html":{}}}],["scalable",{"_index":507,"title":{},"body":{"index.html":{}}}],["search",{"_index":212,"title":{},"body":{"controllers/AuthorsController.html":{},"injectables/AuthorsService.html":{}}}],["secret",{"_index":155,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["see",{"_index":143,"title":{},"body":{"guards/AuthGuard.html":{}}}],["server",{"_index":508,"title":{},"body":{"index.html":{}}}],["setmetadata(is_public_key",{"_index":661,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":517,"title":{},"body":{"index.html":{}}}],["side",{"_index":509,"title":{},"body":{"index.html":{}}}],["signin",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signin(@body",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(signindto",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(username",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{}}}],["signindto",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{}}}],["signindto.password",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{}}}],["signoptions",{"_index":177,"title":{},"body":{"modules/AuthModule.html":{}}}],["simple",{"_index":562,"title":{},"body":{"index.html":{}}}],["skip",{"_index":215,"title":{},"body":{"controllers/AuthorsController.html":{},"injectables/AuthorsService.html":{},"controllers/BooksController.html":{},"injectables/BooksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["sopen",{"_index":642,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/AuthorsController.html":{},"modules/AuthorsModule.html":{},"injectables/AuthorsService.html":{},"controllers/BooksController.html":{},"modules/BooksModule.html":{},"injectables/BooksService.html":{},"classes/CreateBookDto.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["sponsors",{"_index":617,"title":{},"body":{"index.html":{}}}],["src/.../constants.ts",{"_index":657,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":498,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../public.decorator.ts",{"_index":656,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":70,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":71,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:22",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:27",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.guard.ts",{"_index":113,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["src/auth/auth.guard.ts:17",{"_index":122,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/auth/auth.guard.ts:20",{"_index":125,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/auth/auth.guard.ts:48",{"_index":129,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/auth/auth.module.ts",{"_index":172,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:14",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:8",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/constants.ts",{"_index":475,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/public.decorator.ts",{"_index":476,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/authors/authors.controller.ts",{"_index":198,"title":{},"body":{"controllers/AuthorsController.html":{},"coverage.html":{}}}],["src/authors/authors.controller.ts:10",{"_index":207,"title":{},"body":{"controllers/AuthorsController.html":{}}}],["src/authors/authors.controller.ts:15",{"_index":214,"title":{},"body":{"controllers/AuthorsController.html":{}}}],["src/authors/authors.controller.ts:31",{"_index":219,"title":{},"body":{"controllers/AuthorsController.html":{}}}],["src/authors/authors.controller.ts:40",{"_index":228,"title":{},"body":{"controllers/AuthorsController.html":{}}}],["src/authors/authors.controller.ts:48",{"_index":223,"title":{},"body":{"controllers/AuthorsController.html":{}}}],["src/authors/authors.module.ts",{"_index":268,"title":{},"body":{"modules/AuthorsModule.html":{}}}],["src/authors/authors.service.ts",{"_index":270,"title":{},"body":{"injectables/AuthorsService.html":{},"coverage.html":{}}}],["src/authors/authors.service.ts:15",{"_index":277,"title":{},"body":{"injectables/AuthorsService.html":{}}}],["src/authors/authors.service.ts:23",{"_index":281,"title":{},"body":{"injectables/AuthorsService.html":{}}}],["src/authors/authors.service.ts:52",{"_index":286,"title":{},"body":{"injectables/AuthorsService.html":{}}}],["src/authors/authors.service.ts:6",{"_index":274,"title":{},"body":{"injectables/AuthorsService.html":{}}}],["src/authors/authors.service.ts:63",{"_index":284,"title":{},"body":{"injectables/AuthorsService.html":{}}}],["src/authors/authors.service.ts:9",{"_index":282,"title":{},"body":{"injectables/AuthorsService.html":{}}}],["src/books/books.controller.ts",{"_index":305,"title":{},"body":{"controllers/BooksController.html":{},"coverage.html":{}}}],["src/books/books.controller.ts:22",{"_index":308,"title":{},"body":{"controllers/BooksController.html":{}}}],["src/books/books.controller.ts:27",{"_index":313,"title":{},"body":{"controllers/BooksController.html":{}}}],["src/books/books.controller.ts:49",{"_index":314,"title":{},"body":{"controllers/BooksController.html":{}}}],["src/books/books.controller.ts:56",{"_index":317,"title":{},"body":{"controllers/BooksController.html":{}}}],["src/books/books.controller.ts:64",{"_index":315,"title":{},"body":{"controllers/BooksController.html":{}}}],["src/books/books.module.ts",{"_index":340,"title":{},"body":{"modules/BooksModule.html":{}}}],["src/books/books.service.ts",{"_index":342,"title":{},"body":{"injectables/BooksService.html":{},"coverage.html":{}}}],["src/books/books.service.ts:10",{"_index":354,"title":{},"body":{"injectables/BooksService.html":{}}}],["src/books/books.service.ts:116",{"_index":358,"title":{},"body":{"injectables/BooksService.html":{}}}],["src/books/books.service.ts:147",{"_index":356,"title":{},"body":{"injectables/BooksService.html":{}}}],["src/books/books.service.ts:36",{"_index":349,"title":{},"body":{"injectables/BooksService.html":{}}}],["src/books/books.service.ts:48",{"_index":352,"title":{},"body":{"injectables/BooksService.html":{}}}],["src/books/books.service.ts:7",{"_index":346,"title":{},"body":{"injectables/BooksService.html":{}}}],["src/books/create",{"_index":378,"title":{},"body":{"classes/CreateBookDto.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":479,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/prisma/prisma.module.ts",{"_index":390,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/prisma/prisma.service",{"_index":287,"title":{},"body":{"injectables/AuthorsService.html":{},"injectables/BooksService.html":{},"injectables/UsersService.html":{}}}],["src/prisma/prisma.service.ts",{"_index":392,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma/prisma.service.ts:7",{"_index":396,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/users/users.controller.ts",{"_index":398,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:20",{"_index":402,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:25",{"_index":406,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:41",{"_index":407,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:49",{"_index":410,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:60",{"_index":405,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":427,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":429,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:10",{"_index":436,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:20",{"_index":445,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:28",{"_index":448,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:43",{"_index":441,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:49",{"_index":443,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:65",{"_index":439,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:7",{"_index":434,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":523,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":525,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":527,"title":{},"body":{"index.html":{}}}],["started",{"_index":501,"title":{"index.html":{}},"body":{}}],["starter",{"_index":514,"title":{},"body":{"index.html":{}}}],["statements",{"_index":466,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":602,"title":{},"body":{"index.html":{}}}],["steps",{"_index":540,"title":{},"body":{"index.html":{}}}],["straightforward",{"_index":558,"title":{},"body":{"index.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/AuthorsController.html":{},"injectables/AuthorsService.html":{},"controllers/BooksController.html":{},"injectables/BooksService.html":{},"classes/CreateBookDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["string(category",{"_index":332,"title":{},"body":{"controllers/BooksController.html":{}}}],["string(genre",{"_index":330,"title":{},"body":{"controllers/BooksController.html":{}}}],["string(id",{"_index":257,"title":{},"body":{"controllers/AuthorsController.html":{},"controllers/BooksController.html":{},"controllers/UsersController.html":{}}}],["string(search",{"_index":251,"title":{},"body":{"controllers/AuthorsController.html":{}}}],["string(tag",{"_index":329,"title":{},"body":{"controllers/BooksController.html":{}}}],["string(title",{"_index":331,"title":{},"body":{"controllers/BooksController.html":{}}}],["sub",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["support",{"_index":580,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":646,"title":{},"body":{"modules.html":{}}}],["table",{"_index":482,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":481,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":309,"title":{},"body":{"controllers/BooksController.html":{},"injectables/BooksService.html":{}}}],["tagquery",{"_index":372,"title":{},"body":{"injectables/BooksService.html":{}}}],["tags",{"_index":359,"title":{},"body":{"injectables/BooksService.html":{},"classes/CreateBookDto.html":{}}}],["tags?.map((name",{"_index":364,"title":{},"body":{"injectables/BooksService.html":{}}}],["take",{"_index":211,"title":{},"body":{"controllers/AuthorsController.html":{},"injectables/AuthorsService.html":{},"controllers/BooksController.html":{},"injectables/BooksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["terminal",{"_index":631,"title":{},"body":{"index.html":{}}}],["test",{"_index":530,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":533,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":532,"title":{},"body":{"index.html":{}}}],["tests",{"_index":528,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":616,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":397,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authorsservice.author",{"_index":256,"title":{},"body":{"controllers/AuthorsController.html":{}}}],["this.authorsservice.authors(params",{"_index":253,"title":{},"body":{"controllers/AuthorsController.html":{}}}],["this.authorsservice.create(createauthordto",{"_index":241,"title":{},"body":{"controllers/AuthorsController.html":{}}}],["this.authorsservice.deleteauthor",{"_index":264,"title":{},"body":{"controllers/AuthorsController.html":{}}}],["this.authorsservice.updateauthor",{"_index":261,"title":{},"body":{"controllers/AuthorsController.html":{}}}],["this.authservice.signin(signindto.username",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.booksservice.book",{"_index":333,"title":{},"body":{"controllers/BooksController.html":{}}}],["this.booksservice.books",{"_index":328,"title":{},"body":{"controllers/BooksController.html":{}}}],["this.booksservice.createbook(createbookdto",{"_index":323,"title":{},"body":{"controllers/BooksController.html":{}}}],["this.booksservice.deletebook",{"_index":336,"title":{},"body":{"controllers/BooksController.html":{}}}],["this.booksservice.updatebook",{"_index":335,"title":{},"body":{"controllers/BooksController.html":{}}}],["this.extracttokenfromheader(request",{"_index":148,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.jwtservice.signasync(payload",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":154,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.prisma.author.create",{"_index":288,"title":{},"body":{"injectables/AuthorsService.html":{}}}],["this.prisma.author.delete",{"_index":303,"title":{},"body":{"injectables/AuthorsService.html":{}}}],["this.prisma.author.findmany",{"_index":301,"title":{},"body":{"injectables/AuthorsService.html":{}}}],["this.prisma.author.findunique",{"_index":289,"title":{},"body":{"injectables/AuthorsService.html":{}}}],["this.prisma.author.update",{"_index":302,"title":{},"body":{"injectables/AuthorsService.html":{}}}],["this.prisma.book.create",{"_index":362,"title":{},"body":{"injectables/BooksService.html":{}}}],["this.prisma.book.delete",{"_index":376,"title":{},"body":{"injectables/BooksService.html":{}}}],["this.prisma.book.findmany",{"_index":374,"title":{},"body":{"injectables/BooksService.html":{}}}],["this.prisma.book.findunique",{"_index":366,"title":{},"body":{"injectables/BooksService.html":{}}}],["this.prisma.book.update",{"_index":375,"title":{},"body":{"injectables/BooksService.html":{}}}],["this.prisma.user.create",{"_index":451,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.user.delete",{"_index":462,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.user.findmany",{"_index":459,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.user.findunique",{"_index":456,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.user.update",{"_index":461,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":140,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.userservice.createuser(createuserdto",{"_index":414,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.deleteuser",{"_index":423,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.updateuser",{"_index":421,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.user",{"_index":418,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.users(params",{"_index":417,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findusername(username",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":149,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/AuthorsController.html":{},"controllers/BooksController.html":{},"controllers/UsersController.html":{}}}],["time",{"_index":595,"title":{},"body":{"index.html":{}}}],["title",{"_index":311,"title":{},"body":{"controllers/BooksController.html":{},"injectables/BooksService.html":{},"classes/CreateBookDto.html":{}}}],["titlequery",{"_index":371,"title":{},"body":{"injectables/BooksService.html":{}}}],["token",{"_index":147,"title":{},"body":{"guards/AuthGuard.html":{}}}],["touch",{"_index":623,"title":{},"body":{"index.html":{}}}],["true",{"_index":145,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthorsService.html":{},"injectables/BooksService.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":151,"title":{},"body":{"guards/AuthGuard.html":{}}}],["tsconfig.json",{"_index":641,"title":{},"body":{"index.html":{}}}],["twitter",{"_index":628,"title":{},"body":{"index.html":{}}}],["type",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/AuthorsController.html":{},"injectables/AuthorsService.html":{},"controllers/BooksController.html":{},"injectables/BooksService.html":{},"classes/CreateBookDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":487,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":513,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":131,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["undefined",{"_index":130,"title":{},"body":{"guards/AuthGuard.html":{},"controllers/AuthorsController.html":{},"controllers/BooksController.html":{},"controllers/UsersController.html":{}}}],["unit",{"_index":529,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":209,"title":{},"body":{"controllers/AuthorsController.html":{},"injectables/AuthorsService.html":{},"controllers/BooksController.html":{},"controllers/UsersController.html":{}}}],["unlicensed",{"_index":654,"title":{},"body":{"properties.html":{}}}],["update",{"_index":204,"title":{},"body":{"controllers/AuthorsController.html":{},"controllers/BooksController.html":{},"controllers/UsersController.html":{}}}],["update(@param('id",{"_index":260,"title":{},"body":{"controllers/AuthorsController.html":{},"controllers/BooksController.html":{}}}],["update(id",{"_index":224,"title":{},"body":{"controllers/AuthorsController.html":{},"controllers/BooksController.html":{},"controllers/UsersController.html":{}}}],["updateauthor",{"_index":272,"title":{},"body":{"injectables/AuthorsService.html":{}}}],["updateauthor(params",{"_index":285,"title":{},"body":{"injectables/AuthorsService.html":{}}}],["updateauthordto",{"_index":225,"title":{},"body":{"controllers/AuthorsController.html":{}}}],["updatebook",{"_index":345,"title":{},"body":{"injectables/BooksService.html":{}}}],["updatebook(params",{"_index":357,"title":{},"body":{"injectables/BooksService.html":{}}}],["updatebookdto",{"_index":316,"title":{},"body":{"controllers/BooksController.html":{}}}],["updates",{"_index":604,"title":{},"body":{"index.html":{}}}],["updateuser",{"_index":433,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuser(params",{"_index":442,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdto",{"_index":408,"title":{},"body":{"controllers/UsersController.html":{}}}],["useclass",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user(userwhereuniqueinput",{"_index":444,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.id",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.username",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{}}}],["username",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["users",{"_index":399,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users(params",{"_index":447,"title":{},"body":{"injectables/UsersService.html":{}}}],["users.controller",{"_index":428,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":411,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/users.controller",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.module",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users/users.service",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["userscontroller",{"_index":51,"title":{"controllers/UsersController.html":{}},"body":{"modules/AppModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":413,"title":{},"body":{"controllers/UsersController.html":{}}}],["usersmodule",{"_index":44,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":46,"title":{"injectables/UsersService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["userwhereuniqueinput",{"_index":446,"title":{},"body":{"injectables/UsersService.html":{}}}],["using",{"_index":596,"title":{},"body":{"index.html":{}}}],["value",{"_index":659,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":471,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":655,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":652,"title":{},"body":{"properties.html":{}}}],["video",{"_index":588,"title":{},"body":{"index.html":{}}}],["visit",{"_index":577,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":591,"title":{},"body":{"index.html":{}}}],["watch",{"_index":524,"title":{},"body":{"index.html":{}}}],["we're",{"_index":157,"title":{},"body":{"guards/AuthGuard.html":{}}}],["website",{"_index":626,"title":{},"body":{"index.html":{}}}],["working",{"_index":576,"title":{},"body":{"index.html":{}}}],["world",{"_index":73,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":606,"title":{},"body":{"index.html":{}}}],["yes",{"_index":216,"title":{},"body":{"controllers/AuthorsController.html":{},"controllers/BooksController.html":{},"controllers/UsersController.html":{}}}],["you'd",{"_index":620,"title":{},"body":{"index.html":{}}}],["you're",{"_index":534,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuthorsModule.html":{},"modules/BooksModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthorsModule\n\nAuthorsModule\n\nAppModule -->\n\nAuthorsModule->AppModule\n\n\n\n\n\nBooksModule\n\nBooksModule\n\nAppModule -->\n\nBooksModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nAppModule -->\n\nUsersService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            AuthorsModule\n                        \n                        \n                            BooksModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersService } from './users/users.service';\nimport { UsersController } from './users/users.controller';\nimport { AuthModule } from './auth/auth.module';\nimport { PrismaService } from './prisma/prisma.service';\nimport { PrismaModule } from './prisma/prisma.module';\nimport { AuthGuard } from './auth/auth.guard';\nimport { APP_GUARD } from '@nestjs/core';\nimport { UsersModule } from './users/users.module';\nimport { BooksModule } from './books/books.module';\nimport { AuthorsModule } from './authors/authors.module';\n\n@Module({\n  imports: [AuthModule, UsersModule, PrismaModule, BooksModule, AuthorsModule],\n  controllers: [AppController, UsersController],\n  providers: [\n    AppService,\n    PrismaService,\n    {\n      provide: APP_GUARD,\n      useClass: AuthGuard,\n    },\n    UsersService,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getProfile\n                            \n                            \n                                    \n                                    \n                                    \n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: Record)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@HttpCode(HttpStatus.OK)@Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        \nimport {\n  Body,\n  Controller,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Post,\n  Request,\n  UseGuards\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { Public } from './public.decorator';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Public()\n  @HttpCode(HttpStatus.OK)\n  @Post('login')\n  signIn(@Body() signInDto: Record) {\n    return this.authService.signIn(signInDto.username, signInDto.password);\n  }\n\n  @Get('profile')\n  getProfile(@Request() req) {\n    return req.user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractTokenFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.guard.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.guard.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractTokenFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractTokenFromHeader(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.guard.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { jwtConstants } from './constants';\nimport { Request } from 'express';\nimport { IS_PUBLIC_KEY } from './public.decorator';\nimport { Reflector } from '@nestjs/core';\n\n\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(private jwtService: JwtService, private reflector: Reflector) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (isPublic) {\n      // 💡 See this condition\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const token = this.extractTokenFromHeader(request);\n    if (!token) {\n      throw new UnauthorizedException();\n    }\n    try {\n      const payload = await this.jwtService.verifyAsync(token, {\n        secret: jwtConstants.secret,\n      });\n      // 💡 We're assigning the payload to the request object here\n      // so that we can access it in our route handlers\n      request['user'] = payload;\n    } catch {\n      throw new UnauthorizedException();\n    }\n    return true;\n  }\n\n  private extractTokenFromHeader(request: Request): string | undefined {\n    const [type, token] = request.headers.authorization?.split(' ') ?? [];\n    return type === 'Bearer' ? token : undefined;\n  }\n}\n\n\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        \nimport { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { UsersModule } from '../users/users.module';\nimport { JwtModule } from '@nestjs/jwt';\nimport { AuthController } from './auth.controller';\nimport { jwtConstants } from './constants';\n\n@Module({\n  imports: [\n    UsersModule,\n    JwtModule.register({\n      global: true,\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '30m' },\n    }),\n  ],\n  providers: [AuthService],\n  controllers: [AuthController],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(username: string, pass: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                pass\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\nimport { JwtService } from '@nestjs/jwt';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usersService: UsersService,\n    private jwtService: JwtService\n  ) {}\n\n  async signIn(\n    username: string,\n    pass: string,\n  ): Promise {\n    const user = await this.usersService.findUserName(username);\n    if (!user || !(await bcrypt.compare(pass, user.password))) {\n      throw new UnauthorizedException();\n    }\n    const payload = { sub: user.id, username: user.username };\n    return {\n      access_token: await this.jwtService.signAsync(payload),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthorsController.html":{"url":"controllers/AuthorsController.html","title":"controller - AuthorsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthorsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authors/authors.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                authors\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createAuthorDto: Prisma.AuthorCreateInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/authors/authors.controller.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createAuthorDto\n                                            \n                                                        Prisma.AuthorCreateInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(skip?: string, take?: string, search?: string, orderBy?: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/authors/authors.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                skip\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                take\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                search\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                orderBy\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/authors/authors.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/authors/authors.controller.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateAuthorDto: Prisma.AuthorUpdateInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/authors/authors.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateAuthorDto\n                                            \n                                                        Prisma.AuthorUpdateInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete, Query, NotFoundException, Put } from '@nestjs/common';\nimport { AuthorsService } from './authors.service';\nimport { Prisma } from '@prisma/client';\n\n@Controller('authors')\nexport class AuthorsController {\n  constructor(private readonly authorsService: AuthorsService) {}\n\n  @Post()\n  async create(@Body() createAuthorDto: Prisma.AuthorCreateInput) {\n    return this.authorsService.create(createAuthorDto);\n  }\n\n  @Get()\n  async findAll(\n    @Query('skip') skip?: string,\n    @Query('take') take?: string,\n    @Query('search') search?: string,\n    @Query('orderBy') orderBy?: string,\n  ) {\n    const params: any = {\n      skip: skip ? Number(skip) : 0,\n      take: take ? Number(take) : 10,\n      search: search ? String(search) : undefined,\n      orderBy: orderBy ? JSON.parse(orderBy) : undefined,\n    }\n    return this.authorsService.authors(params);\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: string) {\n    const author = await this.authorsService.author({ id: String(id) });\n    if (!author) {\n      throw new NotFoundException('Author not found');\n    }\n    return author;\n  }\n\n  @Put(':id')\n  update(@Param('id') id: string, @Body() updateAuthorDto: Prisma.AuthorUpdateInput) {\n    return this.authorsService.updateAuthor({\n      where: { id: String(id) },\n      data: updateAuthorDto,\n    });\n  }\n\n  @Delete(':id')\n  async remove(@Param('id') id: string) {\n    const author = await this.authorsService.deleteAuthor({ id: String(id) });\n    if (!author) {\n      throw new NotFoundException('Author not found');\n    }\n    return author\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthorsModule.html":{"url":"modules/AuthorsModule.html","title":"module - AuthorsModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthorsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthorsModule\n\n\n\ncluster_AuthorsModule_providers\n\n\n\ncluster_AuthorsModule_exports\n\n\n\n\nAuthorsService \n\nAuthorsService \n\n\n\nAuthorsModule\n\nAuthorsModule\n\nAuthorsService  -->\n\nAuthorsModule->AuthorsService \n\n\n\n\n\nAuthorsService\n\nAuthorsService\n\nAuthorsModule -->\n\nAuthorsService->AuthorsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/authors/authors.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthorsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthorsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthorsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthorsService } from './authors.service';\nimport { AuthorsController } from './authors.controller';\n\n@Module({\n  controllers: [AuthorsController],\n  providers: [AuthorsService],\n  exports: [AuthorsService],\n})\nexport class AuthorsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthorsService.html":{"url":"injectables/AuthorsService.html","title":"injectable - AuthorsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthorsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authors/authors.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                author\n                            \n                            \n                                    Async\n                                authors\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteAuthor\n                            \n                            \n                                    Async\n                                updateAuthor\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/authors/authors.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        author\n                        \n                    \n                \n            \n            \n                \n                        \n                    author(authorWhereUniqueInput: Prisma.AuthorWhereUniqueInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/authors/authors.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                authorWhereUniqueInput\n                                            \n                                                        Prisma.AuthorWhereUniqueInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        authors\n                        \n                    \n                \n            \n            \n                \n                        \n                    authors(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/authors/authors.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createAuthorDto: Prisma.AuthorCreateInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/authors/authors.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createAuthorDto\n                                            \n                                                        Prisma.AuthorCreateInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteAuthor\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteAuthor(where: Prisma.AuthorWhereUniqueInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/authors/authors.service.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                where\n                                            \n                                                        Prisma.AuthorWhereUniqueInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateAuthor\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateAuthor(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/authors/authors.service.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Prisma } from '@prisma/client';\nimport { PrismaService } from 'src/prisma/prisma.service';\n\n@Injectable()\nexport class AuthorsService {\n  constructor(private prisma: PrismaService) {}\n\n  async create(createAuthorDto: Prisma.AuthorCreateInput) {\n    return this.prisma.author.create({\n      data: createAuthorDto,\n    });\n  }\n\n  async author(authorWhereUniqueInput: Prisma.AuthorWhereUniqueInput) {\n    return this.prisma.author.findUnique({\n      where: authorWhereUniqueInput,\n      include: {\n        books: true,\n      },\n    });\n  }\n  async authors(params: {\n    skip?: number;\n    take?: number;\n    search?: string;\n    orderBy?: Prisma.AuthorOrderByWithRelationInput;\n  }) {\n    const { skip, take, search, orderBy } = params;\n\n    const where: Prisma.AuthorWhereInput = search\n      ? {\n          OR: [\n            { firstName: { contains: search, mode: 'insensitive' } },\n            { middleName: { contains: search, mode: 'insensitive' } },\n            { lastName: { contains: search, mode: 'insensitive' } },\n          ],\n        }\n      : {};\n\n    return this.prisma.author.findMany({\n      include: {\n        books: true,\n      },\n      skip,\n      take,\n      where,\n      orderBy,\n    });\n  }\n\n  async updateAuthor(params: {\n    where: Prisma.AuthorWhereUniqueInput;\n    data: Prisma.AuthorUpdateInput;\n  }) {\n    const { where, data } = params;\n    return this.prisma.author.update({\n      data,\n      where,\n    });\n  }\n\n  async deleteAuthor(where: Prisma.AuthorWhereUniqueInput) {\n    return this.prisma.author.delete({\n      where,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/BooksController.html":{"url":"controllers/BooksController.html","title":"controller - BooksController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  BooksController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/books/books.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                books\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createBookDto: CreateBookDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/books/books.controller.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createBookDto\n                                            \n                                                            CreateBookDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(skip?: string, take?: string, tag?: string, genre?: string, title?: string, category?: string, orderBy?: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/books/books.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                skip\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                take\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                tag\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                genre\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                title\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                category\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                orderBy\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/books/books.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/books/books.controller.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateBookDto: CreateBookDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/books/books.controller.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateBookDto\n                                            \n                                                            CreateBookDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Query,\n  NotFoundException,\n  Put,\n} from '@nestjs/common';\nimport { BooksService } from './books.service';\nimport { Category, Prisma } from '@prisma/client';\nimport { CreateBookDto } from './create-book-dto';\n\n@Controller('books')\nexport class BooksController {\n  constructor(private readonly booksService: BooksService) {}\n\n  @Post()\n  async create(@Body() createBookDto: CreateBookDto) {\n    return this.booksService.createBook(createBookDto);\n  }\n\n  @Get()\n  async findAll(\n    @Query('skip') skip?: string,\n    @Query('take') take?: string,\n    @Query('tag') tag?: string, // new\n    @Query('genre') genre?: string, // new\n    @Query('title') title?: string,\n    @Query('category') category?: string,\n    @Query('orderBy') orderBy?: string,\n  ) {\n\n    return this.booksService.books({\n      skip: skip ? Number(skip) : 0,\n      take: take ? Number(take) : 10,\n      tag: tag ? String(tag) : undefined,\n      genre: genre ? String(genre) : undefined,\n      title: title ? String(title) : undefined,\n      category: category ? String(category) : undefined,\n      orderBy: orderBy ? JSON.parse(orderBy) : undefined,\n    });\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: string) {\n    const book = await this.booksService.book({ id: String(id) });\n    if (!book) throw new NotFoundException('Book not found');\n    return book;\n  }\n\n  @Put(':id')\n  async update(@Param('id') id: string, @Body() updateBookDto: CreateBookDto) {\n    return this.booksService.updateBook({\n      where: { id: String(id) },\n      data: updateBookDto,\n    });\n  }\n\n  @Delete(':id')\n  async remove(@Param('id') id: string) {\n    const book = await this.booksService.deleteBook({ id: String(id) });\n    if (!book) throw new NotFoundException('Book not found');\n    return book;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BooksModule.html":{"url":"modules/BooksModule.html","title":"module - BooksModule","body":"\n                   \n\n\n\n\n    Modules\n    BooksModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_BooksModule\n\n\n\ncluster_BooksModule_exports\n\n\n\ncluster_BooksModule_providers\n\n\n\n\nBooksService \n\nBooksService \n\n\n\nBooksModule\n\nBooksModule\n\nBooksService  -->\n\nBooksModule->BooksService \n\n\n\n\n\nBooksService\n\nBooksService\n\nBooksModule -->\n\nBooksService->BooksModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/books/books.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            BooksService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            BooksController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BooksService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { BooksService } from './books.service';\nimport { BooksController } from './books.controller';\n\n@Module({\n  controllers: [BooksController],\n  providers: [BooksService],\n  exports: [BooksService],\n})\nexport class BooksModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BooksService.html":{"url":"injectables/BooksService.html","title":"injectable - BooksService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BooksService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/books/books.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                book\n                            \n                            \n                                    Async\n                                books\n                            \n                            \n                                    Async\n                                createBook\n                            \n                            \n                                    Async\n                                deleteBook\n                            \n                            \n                                    Async\n                                updateBook\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/books/books.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        book\n                        \n                    \n                \n            \n            \n                \n                        \n                    book(bookWhereUniqueInput: Prisma.BookWhereUniqueInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/books/books.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                bookWhereUniqueInput\n                                            \n                                                        Prisma.BookWhereUniqueInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        books\n                        \n                    \n                \n            \n            \n                \n                        \n                    books(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/books/books.service.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createBook\n                        \n                    \n                \n            \n            \n                \n                        \n                    createBook(data: CreateBookDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/books/books.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            CreateBookDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteBook\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteBook(where: Prisma.BookWhereUniqueInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/books/books.service.ts:147\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                where\n                                            \n                                                        Prisma.BookWhereUniqueInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateBook\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateBook(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/books/books.service.ts:116\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Book, Category, Prisma } from '@prisma/client';\nimport { CreateBookDto } from './create-book-dto';\nimport { PrismaService } from 'src/prisma/prisma.service';\n\n@Injectable()\nexport class BooksService {\n  constructor(private prisma: PrismaService) {}\n\n  async createBook(data: CreateBookDto): Promise {\n    const { tags, genres, ...bookData } = data;\n\n    return this.prisma.book.create({\n      data: {\n        ...bookData,\n        tags: {\n          connectOrCreate: tags?.map((name) => ({\n            where: { name },\n            create: { name },\n          })),\n        },\n        genres: {\n          connectOrCreate: genres?.map((name) => ({\n            where: { name },\n            create: { name },\n          })),\n        },\n      },\n      include: {\n        tags: true,\n        genres: true,\n      },\n    });\n  }\n\n  async book(\n    bookWhereUniqueInput: Prisma.BookWhereUniqueInput,\n  ): Promise {\n    return this.prisma.book.findUnique({\n      include: {\n        tags: true,\n        genres: true,\n      },\n      where: bookWhereUniqueInput,\n    });\n  }\n\n  async books(params: {\n    skip?: number;\n    take?: number;\n    tag?: string;\n    genre?: string;\n    title?: string;\n    category?: string;\n    where?: Prisma.BookWhereInput;\n    orderBy?: Prisma.BookOrderByWithRelationInput;\n  }): Promise {\n    const { skip, take, tag, genre, title, category, orderBy } = params;\n\n    const categoryQuery: Prisma.BookWhereInput = category\n      ? {\n          category: {\n            equals: category as Category,\n          },\n        }\n      : {};\n\n    const titleQuery: Prisma.BookWhereInput = title\n      ? {\n          title: {\n            contains: title,\n            mode: 'insensitive',\n          },\n        }\n      : {};\n\n    const tagQuery: Prisma.BookWhereInput = tag\n      ? {\n          tags: {\n            some: {\n              name: { equals: tag, mode: 'insensitive' },\n            },\n          },\n        }\n      : {};\n\n    const genreQuery: Prisma.BookWhereInput = genre\n      ? {\n          genres: {\n            some: {\n              name: { equals: genre, mode: 'insensitive' },\n            },\n          },\n        }\n      : {};\n\n    const where: Prisma.BookWhereInput = {\n      ...titleQuery,\n      ...categoryQuery,\n      ...tagQuery,\n      ...genreQuery,\n    };\n\n    return this.prisma.book.findMany({\n      include: {\n        tags: true,\n        genres: true,\n      },\n      skip,\n      take,\n      where,\n      orderBy,\n    });\n  }\n\n  async updateBook(params: {\n    where: Prisma.BookWhereUniqueInput;\n    data: CreateBookDto;\n  }): Promise {\n    const { where, data } = params;\n    const { tags, genres, ...bookData } = data;\n\n    return this.prisma.book.update({\n      where,\n      data: {\n        ...bookData,\n        tags: {\n          connectOrCreate: tags?.map((name) => ({\n            where: { name },\n            create: { name },\n          })),\n        },\n        genres: {\n          connectOrCreate: genres?.map((name) => ({\n            where: { name },\n            create: { name },\n          })),\n        },\n      },\n      include: {\n        tags: true,\n        genres: true,\n      },\n    });\n  }\n\n  async deleteBook(where: Prisma.BookWhereUniqueInput): Promise {\n    return this.prisma.book.delete({\n      where,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateBookDto.html":{"url":"classes/CreateBookDto.html","title":"class - CreateBookDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateBookDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/books/create-book-dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                authorId\n                            \n                            \n                                category\n                            \n                            \n                                    Optional\n                                genres\n                            \n                            \n                                    Optional\n                                tags\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/books/create-book-dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Category\n\n                    \n                \n                    \n                        \n                                Defined in src/books/create-book-dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        genres\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/books/create-book-dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/books/create-book-dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/books/create-book-dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Category } from \"@prisma/client\";\n\nexport class CreateBookDto {\n  title: string;\n  authorId?: string;\n  category: Category;\n  tags?: string[];\n  genres?: string[];\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n@Global()\n@Module({\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/prisma/prisma.service.ts:7\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  async onModuleInit() {\n    await this.$connect();\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: Prisma.UserCreateInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                        Prisma.UserCreateInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(skip?: string, take?: string, where?: string, orderBy?: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                skip\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                take\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                where\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                orderBy\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: Prisma.UserUpdateInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                        Prisma.UserUpdateInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Delete,\n  Get,\n  Post,\n  Put,\n  Query,\n  Param,\n  Body,\n  NotFoundException,\n} from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { Prisma } from '@prisma/client';\n\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly userService: UsersService) {}\n\n  @Post()\n  async create(@Body() createUserDto: Prisma.UserCreateInput) {\n    return this.userService.createUser(createUserDto);\n  }\n\n  @Get()\n  async findAll(\n    @Query('skip') skip?: string,\n    @Query('take') take?: string,\n    @Query('where') where?: string,\n    @Query('orderBy') orderBy?: string,\n  ) {\n    const params: any = {\n      skip: skip ? Number(skip) : 0,\n      take: take ? Number(take) : 10,\n      where: where ? JSON.parse(where) : undefined,\n      orderBy: orderBy ? JSON.parse(orderBy) : undefined,\n    };\n    return this.userService.users(params);\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: string) {\n    const user = await this.userService.user({ id: String(id) });\n    if (!user) throw new NotFoundException('User not found');\n    return user;\n  }\n\n\n  @Put(':id')\n  async update(\n    @Param('id') id: string,\n    @Body() updateUserDto: Prisma.UserUpdateInput,\n  ) {\n    return this.userService.updateUser({\n      where: { id: String(id) },\n      data: updateUserDto,\n    });\n  }\n\n  @Delete(':id')\n  async delete(@Param('id') id: string) {\n    const user = await this.userService.user({ id: String(id) });\n    if (!user) throw new NotFoundException('User not found');\n    return this.userService.deleteUser({ id: String(id) });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        \nimport { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\n\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                findUserName\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                            \n                                    Async\n                                user\n                            \n                            \n                                    Async\n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(data: Prisma.UserCreateInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        Prisma.UserCreateInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser(where: Prisma.UserWhereUniqueInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                where\n                                            \n                                                        Prisma.UserWhereUniqueInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findUserName\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserName(username: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUser(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        user\n                        \n                    \n                \n            \n            \n                \n                        \n                    user(userWhereUniqueInput: Prisma.UserWhereUniqueInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userWhereUniqueInput\n                                            \n                                                        Prisma.UserWhereUniqueInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        users\n                        \n                    \n                \n            \n            \n                \n                        \n                    users(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { User, Prisma } from '@prisma/client';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class UsersService {\n  constructor(private prisma: PrismaService) {}\n\n  async createUser(data: Prisma.UserCreateInput): Promise {\n    const hashedPassword = await bcrypt.hash(data.password, 10);\n    return this.prisma.user.create({\n      data: {\n        ...data,\n        password: hashedPassword, // Hash the password before saving\n      },\n    });\n  }\n\n  async user(\n    userWhereUniqueInput: Prisma.UserWhereUniqueInput,\n  ): Promise {\n    return this.prisma.user.findUnique({\n      where: userWhereUniqueInput,\n    });\n  }\n\n  async users(params: {\n    skip?: number;\n    take?: number;\n    where?: Prisma.UserWhereInput;\n    orderBy?: Prisma.UserOrderByWithRelationInput;\n  }): Promise {\n    const { skip, take, where, orderBy } = params;\n    return this.prisma.user.findMany({\n      skip,\n      take,\n      where,\n      orderBy,\n    });\n  }\n\n  async findUserName(username: string): Promise {\n    return this.prisma.user.findUnique({\n      where: { username },\n    });\n  }\n\n  async updateUser(params: {\n    where: Prisma.UserWhereUniqueInput;\n    data: Prisma.UserUpdateInput;\n  }): Promise {\n    const { where, data } = params;\n    const hashedPassword = await bcrypt.hash(String(data.password), 10);\n\n    return this.prisma.user.update({\n      data: {\n        ...data,\n        password: hashedPassword,\n      },\n      where,\n    });\n  }\n\n  async deleteUser(where: Prisma.UserWhereUniqueInput): Promise {\n    return this.prisma.user.delete({\n      where,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                        prisma/seed.ts\n            \n            function\n            main\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        prisma/seed.ts\n            \n            variable\n            prisma\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/auth/constants.ts\n            \n            variable\n            jwtConstants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authors/authors.controller.ts\n            \n            controller\n            AuthorsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/authors/authors.service.ts\n            \n            injectable\n            AuthorsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/books/books.controller.ts\n            \n            controller\n            BooksController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/books/books.service.ts\n            \n            injectable\n            BooksService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/books/create-book-dto.ts\n            \n            class\n            CreateBookDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^11.0.1\n        \n            @nestjs/core : ^11.0.1\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/platform-express : ^11.0.1\n        \n            @prisma/client : ^6.13.0\n        \n            bcrypt : ^6.0.0\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            main   (prisma/.../seed.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    prisma/seed.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        main\n                        \n                    \n                \n            \n            \n                \nmain()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g @nestjs/mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\nFull Documentation\nRun these terminal commands\n#Compodoc Installation\nExample :npm i -D @compodoc/compodoc#Doc Generation \nExample :npx @compodoc/compodoc -p tsconfig.json -sOpen your browser and navigate to http://localhost:8080\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthorsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BooksModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthorsModule\n\n\n\ncluster_AuthorsModule_exports\n\n\n\ncluster_AuthorsModule_providers\n\n\n\ncluster_BooksModule\n\n\n\ncluster_BooksModule_exports\n\n\n\ncluster_BooksModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthorsModule\n\nAuthorsModule\n\nAppModule -->\n\nAuthorsModule->AppModule\n\n\n\n\n\nAuthorsService \n\nAuthorsService \n\nAuthorsService  -->\n\nAuthorsModule->AuthorsService \n\n\n\n\n\nBooksModule\n\nBooksModule\n\nAppModule -->\n\nBooksModule->AppModule\n\n\n\n\n\nBooksService \n\nBooksService \n\nBooksService  -->\n\nBooksModule->BooksService \n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\nAppModule -->\n\nUsersService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nAuthorsService\n\nAuthorsService\n\nAuthorsModule -->\n\nAuthorsService->AuthorsModule\n\n\n\n\n\nBooksService\n\nBooksService\n\nBooksModule -->\n\nBooksService->BooksModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Class\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            jwtConstants   (src/.../constants.ts)\n                        \n                        \n                            prisma   (prisma/.../seed.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Default value : env.IS_PUBLIC_KEY\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    src/auth/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        jwtConstants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  secret: env.JWT_SECRET,\n}\n                    \n                \n\n\n        \n    \n\n    prisma/seed.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        prisma\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new PrismaClient()\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
